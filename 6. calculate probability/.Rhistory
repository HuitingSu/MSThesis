#library(MASS)
library(glmnet)
n_rep <- 200 #500 rep is quite long
a <- 5  # absolute value of true factor
SameTrue <- TRUE
#-------------------------
n <- 12
p <- 16
l <- 5
q <- 2  # number of true variables
X <- read.csv("design1226.csv", skip = 7, header = FALSE)
X <- apply(X, 1, gsub, pattern="\\+", replacement= "1", perl=TRUE)
X <- apply(X, 1, gsub, pattern="\\-", replacement= "-1", perl=TRUE)
X <- matrix(as.numeric(X), n, p)
PSC <- numeric(10000)
set.seed(53437)
# Have 5 different responses
# There are 3 same true var for different tasks, the true vars are randomly chosen
# for every task, we need a vector to set the true vars
b <- matrix(0, p, l)
if(SameTrue == TRUE){       #in this case, the variable is equal for every task
true_var <- sample(p, q)
for(k in 1:q){
for (j in 1:l){
vsign = sample(c(-1,1), 1)
b[true_var[k], j] <<- vsign * runif(1, 3, 5) #a  #runif(3, 3, 5)
}
}
}else{
for (j in 1:l){         #for each task, sample different true factors
true_var <- sample(p, q)
b[true_var, j] <<- a  #runif(3, 3, 5)
}
}
set.seed(53437)
# Have 5 different responses
# There are 3 same true var for different tasks, the true vars are randomly chosen
# for every task, we need a vector to set the true vars
b <- matrix(0, p, l)
if(SameTrue == TRUE){       #in this case, the variable is equal for every task
true_var <- sample(p, q)
for(k in 1:q){
for (j in 1:l){
vsign = sample(c(-1,1), 1)
b[true_var[k], j] <<- vsign * runif(1, 3, 5) #a  #runif(3, 3, 5)
}
}
}else{
for (j in 1:l){         #for each task, sample different true factors
true_var <- sample(p, q)
b[true_var, j] <<- a  #runif(3, 3, 5)
}
}
set.seed(53437)
# Have 5 different responses
# There are 3 same true var for different tasks, the true vars are randomly chosen
# for every task, we need a vector to set the true vars
b <- matrix(0, p, l)
if(SameTrue == TRUE){       #in this case, the variable is equal for every task
true_var <- sample(p, q)
for(k in 1:q){
for (j in 1:l){
vsign = sample(c(-1,1), 1)
b[true_var[k], j] <- vsign * runif(1, 3, 5) #a  #runif(3, 3, 5)
}
}
}else{
for (j in 1:l){         #for each task, sample different true factors
true_var <- sample(p, q)
b[true_var, j] <- a  #runif(3, 3, 5)
}
}
y <- X %*% b
# epsilon is the gaussian error. dimension: n * l.
epsilon <- matrix(rnorm(n * l), n, l)
y <- y + epsilon
XA <- X[, true_var]
View(XA)
View(X)
View(b)
bA <- b[true_var,]
View(bA)
sign(-1)
sgnb <- sign(b)
View(sgnb)
View(sgnb)
sgnb <- sign(bA)
View(sgnb)
XA <- X[, true_var]
XC <- X[, -true_var]
bA <- b[true_var,]
sgnbA <- sign(bA)
R <- t(XC) %*% XA %*% solve(t(XA) %*% XA) %*% sgnbA
View(sgnbA)
View(R)
solve(t(XA) %*% XA)
lambda = 1
D <- lambda/2 * solve(t(XA) %*% XA)
D
Sigma <- matrix(c(10,3,3,2),2,2)
mvrnorm(n = 1000, rep(0, 2), Sigma)
install.packages("MASS")
library(MASS)
mvrnorm(n = 1000, rep(0, 2), Sigma)
mvrnorm(n = 10, rep(0, 2), Sigma)
mvrnorm(n = 1, rep(0, 2), Sigma)
sigma = 1
I = diag(n)
V <- mvrnorm(n = 1, D, sigma^2*solve(t(XA) %*% XA))
lambda = 1
sigma = 1
I = diag(n)
XA <- X[, true_var]
XC <- X[, -true_var]
bA <- b[true_var,]
sgnbA <- sign(bA)
R <- t(XC) %*% XA %*% solve(t(XA) %*% XA) %*% sgnbA
P <- XA %*% solve(t(XA) %*% XA) %*% t(XA)
D <- lambda/2 * solve(t(XA) %*% XA) %*% sgnbA
V <- mvrnorm(n = 1, D, sigma^2*solve(t(XA) %*% XA))
solve(t(XA) %*% XA)
D <- lambda/2 * solve(t(XA) %*% XA) %*% sgnbA
D
t(XC) %*% (I-P) %*% XC
lambda = 1
sigma = 1
I = diag(n)
XA <- X[, true_var]
XC <- X[, -true_var]
bA <- b[true_var,]
sgnbA <- sign(bA)
inv = solve(t(XA) %*% XA)
R <- t(XC) %*% XA %*% inv %*% sgnbA
P <- XA %*% inv %*% t(XA)
D <- lambda/2 * inv %*% sgnbA
V <- mvrnorm(n = 1, D, sigma^2 * inv %*% t(XA) %*% XA %*% t(inv))
sigma^2 * inv %*% t(XA) %*% XA %*% t(inv)
D
library(MASS)
library(glmnet)
n_rep <- 200 #500 rep is quite long
a <- 5  # absolute value of true factor
SameTrue <- TRUE
#-------------------------
n <- 12
p <- 16
l <- 1
q <- 2  # number of true variables
X <- read.csv("design1226.csv", skip = 7, header = FALSE)
X <- apply(X, 1, gsub, pattern="\\+", replacement= "1", perl=TRUE)
X <- apply(X, 1, gsub, pattern="\\-", replacement= "-1", perl=TRUE)
X <- matrix(as.numeric(X), n, p)
PSC <- numeric(10000)
set.seed(53437)
# Have 5 different responses
# There are 3 same true var for different tasks, the true vars are randomly chosen
# for every task, we need a vector to set the true vars
b <- matrix(0, p, l)
if(SameTrue == TRUE){       #in this case, the variable is equal for every task
true_var <- sample(p, q)
for(k in 1:q){
for (j in 1:l){
vsign = sample(c(-1,1), 1)
b[true_var[k], j] <- vsign * runif(1, 3, 5) #a  #runif(3, 3, 5)
}
}
}else{
for (j in 1:l){         #for each task, sample different true factors
true_var <- sample(p, q)
b[true_var, j] <- a  #runif(3, 3, 5)
}
}
y <- X %*% b
# epsilon is the gaussian error. dimension: n * l.
epsilon <- matrix(rnorm(n * l), n, l)
y <- y + epsilon
View(epsilon)
View(b)
lambda = 1
sigma = 1
I = diag(n)
XA <- X[, true_var]
XC <- X[, -true_var]
bA <- b[true_var,]
sgnbA <- sign(bA)
inv = solve(t(XA) %*% XA)
R <- t(XC) %*% XA %*% inv %*% sgnbA
P <- XA %*% inv %*% t(XA)
D <- lambda/2 * inv %*% sgnbA
V <- mvrnorm(n = 1, D, sigma^2 * inv %*% t(XA) %*% XA %*% t(inv))
U <- mvrnorm(n = 1, R, sigma^2/lambda^2 * t(XC) %*% (I-P) %*% t(I-P) %*% XC)
U
V
V <- mvrnorm(n = 1, D, sigma^2 * inv) #%*% t(XA) %*% XA %*% t(inv))
V
sigma^2 * inv)
sigma^2 * inv
sigma^2 * inv %*% t(XA) %*% XA %*% t(inv)
t(XA) %*% XA %*% t(inv)
sigma^2/lambda^2 * t(XC) %*% (I-P) %*% t(I-P) %*% XC
t(I-P)
sigma^2/lambda^2 * t(XC) %*% (I-P) %*% t(I-P) %*% XC
4*sigma^2/lambda^2 * t(XC) %*% (I-P) %*% t(I-P) %*% XC
sigma^2/lambda^2 * t(XC) %*% (I-P) %*% XC
sigma^2/lambda^2 * t(XC) %*% (I-P) %*% t(I-P) %*% XC
t(I-P)
sigma^2/lambda^2
(I-P) %*% t(I-P)
U<=1
(U >= -1 && U <= 1)
P1 <- U >= -1 && U <= 1
P1
min(0,V)
V
